#!/usr/bin/env bash

[ "$BUILDPACK_XTRACE" ] && set -o xtrace

set -e

get_os() {
  uname | tr A-Z a-z
}

# The standard library. We use it later to set_default_env.
if [[ ! -f  /tmp/stdlib-v4.sh ]]; then
  curl --retry 3 -s https://lang-common.s3.amazonaws.com/buildpack-stdlib/v4/stdlib.sh > /tmp/stdlib-v4.sh
fi
source /tmp/stdlib-v4.sh
# end standard library init.

# we can use the buildpack standard library to export the environment
export_env $3

BIN_DIR=$(cd $(dirname $0); pwd)
BUILD_DIR=$1
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
os=$(get_os)
export JQ="$BP_DIR/vendor/jq-$os"

# required for set_default_env, cribbed from the python buildpack
PROFILE_PATH="$BUILD_DIR/.profile.d/catfish.sh"
EXPORT_PATH="$BIN_DIR/../export"
export PROFILE_PATH EXPORT_PATH
mkdir $BUILD_DIR/.profile.d
# end required for set_default_env

# The default environment is production
SELECTED_ENVIRONMENT=${CATFISH_ENVIRONMENT:-production}

for env_dir in $BUILD_DIR/{catfish,etc/environments}/${SELECTED_ENVIRONMENT}; do
    if test -f ${env_dir}/?rocfile; then
        echo "Found config files in ${env_dir}"
        #Â ? matches any single character so we move either procfile or Procfile
        cp ${env_dir}/?rocfile $BUILD_DIR/Procfile

        if test -f ${env_dir}/env; then
            # set the environment variables from the file as defaults in the slug
            # uses the 'buildpack standard library' function https://github.com/heroku/buildpack-stdlib/blob/bff46f46fdd1d1cf4285ae0384ee42df8fa94414/stdlib.sh#L75-L80
            while read line; do
                IFS='=' read key value <<< "${line}"
                set_default_env ${key} ${value}
            done < ${env_dir}/env
        fi
        exit 0
    fi
done
echo "No acceptable environment found for ${SELECTED_ENVIRONMENT}"
exit 1

# set python version from .python-version
if test -f .python-version; then
    echo "populating runtime.txt with correct python version"
    echo -n python > runtime.txt
    grep '[0-9.]*' .python-version >> $BUILD_DIR/runtime.txt
fi

# automate nvm + postinstall hook for node build
if test -f .nvmrc; then
    echo "adjusting package.json"
    $JQ '{engines: {node: $version}, scripts: {postinstall: "npm run build"}} * .' --arg version $(cat .nvmrc) < package.json > package.json.updated
    mv package.json.updated $BUILD_DIR/package.json
fi
